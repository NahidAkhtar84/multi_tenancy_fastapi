"""user and service tables created

Revision ID: d0256ba061b2
Revises: 5a00ff82a9f4
Create Date: 2023-02-15 06:55:32.055363

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from app.alembic.tenant import for_each_tenant_schema

# revision identifiers, used by Alembic.
revision = 'd0256ba061b2'
down_revision = '5a00ff82a9f4'
branch_labels = None
depends_on = None

@for_each_tenant_schema
def upgrade() -> None:
    preparer = sa.sql.compiler.IdentifierPreparer(op.get_bind().dialect)
    schema_quoted = preparer.format_schema(schema)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('public_companies',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=False), autoincrement=True, nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('short_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('nip', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('qr_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_public_companies')),
    sa.UniqueConstraint('city', name=op.f('uq_public_companies_city')),
    sa.UniqueConstraint('country', name=op.f('uq_public_companies_country')),
    sa.UniqueConstraint('name', name=op.f('uq_public_companies_name')),
    sa.UniqueConstraint('nip', name=op.f('uq_public_companies_nip')),
    sa.UniqueConstraint('qr_id', name=op.f('uq_public_companies_qr_id')),
    sa.UniqueConstraint('short_name', name=op.f('uq_public_companies_short_name')),
    schema='public'
    )
    op.create_table('public_users',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=False), autoincrement=True, nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('service_token', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('service_token_valid_to', sa.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tos', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('tz', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('lang', sa.VARCHAR(length=8), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_public_users')),
    sa.UniqueConstraint('email', name=op.f('uq_public_users_email')),
    sa.UniqueConstraint('lang', name=op.f('uq_public_users_lang')),
    sa.UniqueConstraint('password', name=op.f('uq_public_users_password')),
    sa.UniqueConstraint('service_token', name=op.f('uq_public_users_service_token')),
    sa.UniqueConstraint('tz', name=op.f('uq_public_users_tz')),
    schema='public'
    )
    op.create_table('tenants',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), autoincrement=True, nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('schema', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('host', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tenants')),
    schema='public'
    )
    op.create_table('tenant_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('status', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tenant_users')),
    schema='shared'
    )
    op.create_index(op.f('ix_shared_tenant_users_email'), 'tenant_users', ['email'], unique=True, schema='shared')
    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_services')),
    schema='tenant_default'
    )
    op.create_index(op.f('ix_tenant_default_services_id'), 'services', ['id'], unique=False, schema='tenant_default')
    op.create_index(op.f('ix_tenant_default_services_name'), 'services', ['name'], unique=False, schema='tenant_default')
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    schema='tenant_default'
    )
    op.create_index(op.f('ix_tenant_default_users_email'), 'users', ['email'], unique=True, schema='tenant_default')
    op.create_index(op.f('ix_tenant_default_users_full_name'), 'users', ['full_name'], unique=False, schema='tenant_default')
    op.create_index(op.f('ix_tenant_default_users_id'), 'users', ['id'], unique=False, schema='tenant_default')
    op.drop_table('public_users', schema='shared')
    op.drop_table('public_companies', schema='shared')
    op.alter_column('tenants', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True,
               schema='shared')
    op.alter_column('tenants', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=256),
               nullable=False,
               schema='shared')
    op.alter_column('tenants', 'schema',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=256),
               nullable=False,
               schema='shared')
    op.alter_column('tenants', 'host',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=256),
               nullable=False,
               schema='shared')
    op.drop_constraint('tenants_uuid_key', 'tenants', schema='shared', type_='unique')
    op.create_index(op.f('ix_shared_tenants_name'), 'tenants', ['name'], unique=True, schema='shared')
    op.create_unique_constraint(op.f('uq_tenants_host'), 'tenants', ['host'], schema='shared')
    op.create_unique_constraint(op.f('uq_tenants_schema'), 'tenants', ['schema'], schema='shared')
    op.drop_column('tenants', 'uuid', schema='shared')
    # ### end Alembic commands ###


@for_each_tenant_schema
def downgrade() -> None:
    preparer = sa.sql.compiler.IdentifierPreparer(op.get_bind().dialect)
    schema_quoted = preparer.format_schema(schema)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tenants', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True), schema='shared')
    op.drop_constraint(op.f('uq_tenants_schema'), 'tenants', schema='shared', type_='unique')
    op.drop_constraint(op.f('uq_tenants_host'), 'tenants', schema='shared', type_='unique')
    op.drop_index(op.f('ix_shared_tenants_name'), table_name='tenants', schema='shared')
    op.create_unique_constraint('tenants_uuid_key', 'tenants', ['uuid'], schema='shared')
    op.alter_column('tenants', 'host',
               existing_type=sa.String(length=256),
               type_=sa.VARCHAR(length=100),
               nullable=True,
               schema='shared')
    op.alter_column('tenants', 'schema',
               existing_type=sa.String(length=256),
               type_=sa.VARCHAR(length=100),
               nullable=True,
               schema='shared')
    op.alter_column('tenants', 'name',
               existing_type=sa.String(length=256),
               type_=sa.VARCHAR(length=100),
               nullable=True,
               schema='shared')
    op.alter_column('tenants', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True,
               schema='shared')
    op.create_table('public_companies',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('short_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('nip', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('qr_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='public_companies_pkey'),
    sa.UniqueConstraint('qr_id', name='public_companies_qr_id_key'),
    sa.UniqueConstraint('tenant_id', name='public_companies_tenant_id_key'),
    sa.UniqueConstraint('uuid', name='public_companies_uuid_key'),
    schema='shared'
    )
    op.create_table('public_users',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('service_token', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('service_token_valid_to', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('tos', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('tz', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('lang', sa.VARCHAR(length=8), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='public_users_pkey'),
    sa.UniqueConstraint('email', name='public_users_email_key'),
    sa.UniqueConstraint('uuid', name='public_users_uuid_key'),
    schema='shared'
    )
    op.drop_index(op.f('ix_tenant_default_users_id'), table_name='users', schema='tenant_default')
    op.drop_index(op.f('ix_tenant_default_users_full_name'), table_name='users', schema='tenant_default')
    op.drop_index(op.f('ix_tenant_default_users_email'), table_name='users', schema='tenant_default')
    op.drop_table('users', schema='tenant_default')
    op.drop_index(op.f('ix_tenant_default_services_name'), table_name='services', schema='tenant_default')
    op.drop_index(op.f('ix_tenant_default_services_id'), table_name='services', schema='tenant_default')
    op.drop_table('services', schema='tenant_default')
    op.drop_index(op.f('ix_shared_tenant_users_email'), table_name='tenant_users', schema='shared')
    op.drop_table('tenant_users', schema='shared')
    op.drop_table('tenants', schema='public')
    op.drop_table('public_users', schema='public')
    op.drop_table('public_companies', schema='public')
    # ### end Alembic commands ###
